{"version":3,"file":"update.route.js","sourceRoot":"","sources":["../../../../src/routes/cupcakes/put/update.route.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAuD;AACvD,6CAAiD;AAEjD,8CAAqC;AAErC,8CAAmF;AACnF,gDAAoD;AA2BpD,IAAa,qBAAqB,GAAlC,MAAa,qBAAqB;IAC9B;;;;OAIG;IACH,YAAoB,gBAAiC,EAAU,OAAsB;QAAjE,qBAAgB,GAAhB,gBAAgB,CAAiB;QAAU,YAAO,GAAP,OAAO,CAAe;IACrF,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,OAAgB;QAClB,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,IAAI,CACxE,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CACjC,CAAC;IACN,CAAC;CACJ,CAAA;AAlBY,qBAAqB;IAzBjC,YAAK,CAAC;QACH,IAAI,EAAE,oBAAoB;QAC1B,MAAM,EAAE,KAAK;QACb,MAAM,EAAE;YACJ,QAAQ,EAAE;gBACN,MAAM,EAAE;oBACJ,EAAE,EAAE,sBAAY;iBACnB;gBACD,OAAO,EAAE,yBAAe;aAC3B;YACD,OAAO,EAAE;gBACL,MAAM,EAAE,MAAM;gBACd,KAAK,EAAE,kBAAkB;gBACzB,KAAK,EAAE,IAAI;aACd;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE;oBACJ,GAAG,EAAE,0BAAgB;iBACxB;aACJ;YACD,WAAW,EAAE,oBAAoB;YACjC,KAAK,EAAE,sEAAsE;YAC7E,IAAI,EAAE,CAAE,KAAK,EAAE,SAAS,CAAE;SAC7B;KACJ,CAAC;qCAOwC,0BAAe,EAAmB,sBAAa;GAN5E,qBAAqB,CAkBjC;AAlBY,sDAAqB","sourcesContent":["import { OnPut, Request, Route } from '@hapiness/core';\nimport { LoggerService } from '@hapiness/logger';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Cupcake } from '../../../interfaces';\nimport { ID_PARAMETER, CUPCAKE_PAYLOAD, CUPCAKE_RESPONSE } from '../../../schemas';\nimport { CupcakesService } from '../../../services';\n\n@Route({\n    path: '/api/cupcakes/{id}',\n    method: 'PUT',\n    config: {\n        validate: {\n            params: {\n                id: ID_PARAMETER\n            },\n            payload: CUPCAKE_PAYLOAD\n        },\n        payload: {\n            output: 'data',\n            allow: 'application/json',\n            parse: true\n        },\n        response: {\n            status: {\n                200: CUPCAKE_RESPONSE\n            }\n        },\n        description: 'Update one cupcake',\n        notes: 'Update the cupcake for the given id in path parameter and returns it',\n        tags: [ 'api', 'cupcake' ]\n    }\n})\nexport class PutUpdateCupcakeRoute implements OnPut {\n    /**\n     * Class constructor\n     * @param _cupcakesService\n     * @param _logger\n     */\n    constructor(private _cupcakesService: CupcakesService, private _logger: LoggerService) {\n    }\n\n    /**\n     * OnPut implementation\n     * @param request\n     */\n    onPut(request: Request): Observable<Cupcake> {\n        return this._cupcakesService.update(request.params.id, request.payload).pipe(\n            tap(_ => this._logger.info(_))\n        );\n    }\n}\n"]}