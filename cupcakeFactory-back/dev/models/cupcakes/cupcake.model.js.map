{"version":3,"file":"cupcake.model.js","sourceRoot":"","sources":["../../../src/models/cupcakes/cupcake.model.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAwE;AACxE,wCAAwC;AAMxC,IAAa,YAAY,oBAAzB,MAAa,YAAa,SAAQ,aAAK;IAInC;;;;OAIG;IACH,YAAoB,mBAAuC;QACvD,0BAA0B;QAC1B,KAAK,CAAC,cAAY,CAAC,CAAC;QAFJ,wBAAmB,GAAnB,mBAAmB,CAAoB;QAIvD,UAAU;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,gBAAgB;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,GAAG,EAAE;gBACD,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI;aACb;YACD,WAAW,EAAE;gBACX,IAAI,EAAE;oBACJ,IAAI,EAAE,MAAM;oBACZ,QAAQ,EAAE,IAAI;oBACd,IAAI,EAAE,IAAI;iBACX;gBACD,SAAS,EAAE;oBACT,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,IAAI;iBACX;gBACD,OAAO,EAAE;oBACP,IAAI,EAAE,MAAM;oBACZ,IAAI,EAAE,IAAI;iBACX;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI;aACX;YACD,KAAK,EAAE;gBACL,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,IAAI;aACX;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,uFAAuF;QACvF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YAClB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,OAAO,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;IACN,CAAC;CACJ,CAAA;AA7DY,YAAY;IAJxB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,UAAU;KACzB,CAAC;qCAU2C,0BAAkB;GATlD,YAAY,CA6DxB;AA7DY,oCAAY","sourcesContent":["import { Model, MongoClientService, MongoModel } from '@hapiness/mongo';\n// import * as mongoose from 'mongoose';\n\n@MongoModel({\n    adapter: 'mongoose',\n    collection: 'cupcakes'\n})\nexport class CupcakeModel extends Model {\n    // property to store schema\n    readonly schema: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        // call parent constructor\n        super(CupcakeModel);\n\n        // get dao\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\n\n        // create schema\n        this.schema = new dao.Schema({\n            nom: {\n                type: String,\n                required: true,\n                trim: true\n            },\n            composition: {\n              pate: {\n                type: String,\n                required: true,\n                trim: true\n              },\n              garniture: {\n                type: String,\n                trim: true\n              },\n              glacage: {\n                type: String,\n                trim: true\n              }\n            },\n            custom: {\n              type: Boolean,\n              required: true,\n              trim: true\n            },\n            photo: {\n              type: String,\n              trim: true\n            }\n        }, {\n            versionKey: false\n        });\n\n        // implement virtual method toJSON to delete _id field and stringify all ObjectId field\n        this.schema.set('toJSON', {\n                virtuals: true,\n                transform: function (doc, ret) {\n                    delete ret._id;\n                    return ret;\n                }\n            }\n        );\n    }\n}\n"]}