{"version":3,"file":"cupcake.model.js","sourceRoot":"","sources":["../../../src/models/cupcakes/cupcake.model.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,2CAAwE;AACxE,wCAAwC;AAMxC,IAAa,YAAY,oBAAzB,MAAa,YAAa,SAAQ,aAAK;IAInC;;;;OAIG;IACH,YAAoB,mBAAuC;QACvD,0BAA0B;QAC1B,KAAK,CAAC,cAAY,CAAC,CAAC;QAFJ,wBAAmB,GAAnB,mBAAmB,CAAoB;QAIvD,UAAU;QACV,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QAEpE,gBAAgB;QAChB,IAAI,CAAC,MAAM,GAAG,IAAI,GAAG,CAAC,MAAM,CAAC;YACzB,GAAG,EAAE;gBACD,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI;aACb;YACD,WAAW,EAAE;gBACX,IAAI,EAAE;oBACJ,KAAK,EAAE;wBACL,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;iBACF;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;iBACF;gBACD,OAAO,EAAE;oBACP,KAAK,EAAE;wBACL,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;iBACF;gBACD,SAAS,EAAE;oBACT,KAAK,EAAE;wBACL,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;oBACD,GAAG,EAAE;wBACH,IAAI,EAAE,MAAM;wBACZ,QAAQ,EAAE,IAAI;wBACd,IAAI,EAAE,IAAI;qBACX;iBACF;aACF;YACD,QAAQ,EAAE;gBACR,IAAI,EAAE,MAAM;gBACZ,QAAQ,EAAE,IAAI;gBACd,IAAI,EAAE,IAAI;aACX;SACJ,EAAE;YACC,UAAU,EAAE,KAAK;SACpB,CAAC,CAAC;QAEH,uFAAuF;QACvF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE;YAClB,QAAQ,EAAE,IAAI;YACd,SAAS,EAAE,UAAU,GAAG,EAAE,GAAG;gBACzB,OAAO,GAAG,CAAC,GAAG,CAAC;gBACf,OAAO,GAAG,CAAC;YACf,CAAC;SACJ,CACJ,CAAC;IACN,CAAC;CACJ,CAAA;AA5FY,YAAY;IAJxB,kBAAU,CAAC;QACR,OAAO,EAAE,UAAU;QACnB,UAAU,EAAE,UAAU;KACzB,CAAC;qCAU2C,0BAAkB;GATlD,YAAY,CA4FxB;AA5FY,oCAAY","sourcesContent":["import { Model, MongoClientService, MongoModel } from '@hapiness/mongo';\n// import * as mongoose from 'mongoose';\n\n@MongoModel({\n    adapter: 'mongoose',\n    collection: 'cupcakes'\n})\nexport class CupcakeModel extends Model {\n    // property to store schema\n    readonly schema: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        // call parent constructor\n        super(CupcakeModel);\n\n        // get dao\n        const dao = this._mongoClientService.getDao(this.connectionOptions);\n\n        // create schema\n        this.schema = new dao.Schema({\n            nom: {\n                type: String,\n                required: true,\n                trim: true\n            },\n            composition: {\n              base: {\n                label: {\n                  type: String,\n                  required: true,\n                  trim: true\n                },\n                src: {\n                  type: String,\n                  required: true,\n                  trim: true\n                }\n              },\n              glacage: {\n                label: {\n                  type: String,\n                  required: true,\n                  trim: true\n                },\n                src: {\n                  type: String,\n                  required: true,\n                  trim: true\n                }\n              },\n              topping: {\n                label: {\n                  type: String,\n                  required: true,\n                  trim: true\n                },\n                src: {\n                  type: String,\n                  required: true,\n                  trim: true\n                }\n              },\n              garniture: {\n                label: {\n                  type: String,\n                  required: true,\n                  trim: true\n                },\n                src: {\n                  type: String,\n                  required: true,\n                  trim: true\n                }\n              }\n            },\n            createur: {\n              type: String,\n              required: true,\n              trim: true\n            }\n        }, {\n            versionKey: false\n        });\n\n        // implement virtual method toJSON to delete _id field and stringify all ObjectId field\n        this.schema.set('toJSON', {\n                virtuals: true,\n                transform: function (doc, ret) {\n                    delete ret._id;\n                    return ret;\n                }\n            }\n        );\n    }\n}\n"]}