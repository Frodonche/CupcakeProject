{"version":3,"file":"glacages.service.js","sourceRoot":"","sources":["../../src/services/glacages.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AACtC,yCAA4C;AAE5C,+BAAkD;AAClD,8CAAoD;AAEpD,2EAAsE;AAGtE,IAAa,eAAe,GAA5B,MAAa,eAAe;IACxB;;OAEG;IACH,YAAoB,wBAAiD;QAAjD,6BAAwB,GAAxB,wBAAwB,CAAyB;IACrE,CAAC;IAED;;;;OAIG;IACH,OAAO;QACH,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IAChD,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,EAAU;QACV,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC5C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC,CAC1E,CACJ,CAAC;IACV,CAAC;CACJ,CAAA;AAlCY,eAAe;IAD3B,iBAAU,EAAE;qCAKqC,mDAAuB;GAJ5D,eAAe,CAkC3B;AAlCY,0CAAe","sourcesContent":["import { Biim } from '@hapiness/biim';\nimport { Injectable } from '@hapiness/core';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, flatMap} from 'rxjs/operators';\nimport { Glacage } from '../interfaces';\nimport { GlacagesDocumentService } from './glacages-document.service';\n\n@Injectable()\nexport class GlacagesService {\n    /**\n     * Class constructor\n     */\n    constructor(private _glacagesDocumentService: GlacagesDocumentService) {\n    }\n\n    /**\n     * Returns all existing glacages in the list\n     *\n     * @returns {Observable<Glacage[] | void>}\n     */\n    listAll(): Observable<Glacage[] | void> {\n        return this._glacagesDocumentService.find();\n    }\n\n    /**\n     * Returns one glacages of the list matching id in parameter\n     *\n     * @param {string} id of the glacages\n     *\n     * @returns {Observable<Glacage>}\n     */\n    one(id: string): Observable<Glacage> {\n        return this._glacagesDocumentService.findById(id)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`Aucun glacage avec l'id '${id}' trouve`))\n                )\n            );\n    }\n}\n"]}