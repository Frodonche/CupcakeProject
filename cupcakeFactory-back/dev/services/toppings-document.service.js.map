{"version":3,"file":"toppings-document.service.js","sourceRoot":"","sources":["../../src/services/toppings-document.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAA4C;AAC5C,2CAAqD;AAErD,+BAAwC;AACxC,8CAAqC;AAErC,iDAAkD;AAGlD,IAAa,uBAAuB,GAApC,MAAa,uBAAuB;IAIhC;;;;OAIG;IACH,YAAoB,mBAAuC;QAAvC,wBAAmB,GAAnB,mBAAmB,CAAoB;QACvD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,EAAE,uBAAY,CAAC,CAAC;IAC9F,CAAC;IAED;;;;OAIG;IACH,IAAI;QACA,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;aAC/B,IAAI,CACD,eAAG,CAAC,CAAC,IAAwB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CACzG,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,QAAQ,CAAC,EAAU;QACf,OAAO,WAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;aACnC,IAAI,CACD,eAAG,CAAC,CAAC,GAAqB,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CACnE,CAAC;IACV,CAAC;CACJ,CAAA;AAtCY,uBAAuB;IADnC,iBAAU,EAAE;qCAUgC,0BAAkB;GATlD,uBAAuB,CAsCnC;AAtCY,0DAAuB","sourcesContent":["import { Injectable } from '@hapiness/core';\nimport { MongoClientService } from '@hapiness/mongo';\nimport { MongooseDocument } from 'mongoose';\nimport { from, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Topping } from '../interfaces';\nimport { ToppingModel } from '../models/toppings';\n\n@Injectable()\nexport class ToppingsDocumentService {\n    // private property to store document instance\n    private _document: any;\n\n    /**\n     * Class constructor\n     *\n     * @param {MongoClientService} _mongoClientService\n     */\n    constructor(private _mongoClientService: MongoClientService) {\n        this._document = this._mongoClientService.getModel({ adapter: 'mongoose' }, ToppingModel);\n    }\n\n    /**\n     * Call mongoose method, call toJSON on each result and returns Topping[] or undefined\n     *\n     * @return {Observable<Topping[] | void>}\n     */\n    find(): Observable<Topping[] | void> {\n        return from(this._document.find({}))\n            .pipe(\n                map((docs: MongooseDocument[]) => (!!docs && docs.length > 0) ? docs.map(_ => _.toJSON()) : undefined)\n            );\n    }\n\n    /**\n     * Returns one topping of the list matching id in parameter\n     *\n     * @param {string} id of the topping in the db\n     *\n     * @return {Observable<Topping | void>}\n     */\n    findById(id: string): Observable<Topping | void> {\n        return from(this._document.findById(id))\n            .pipe(\n                map((doc: MongooseDocument) => !!doc ? doc.toJSON() : undefined)\n            );\n    }\n}\n"]}