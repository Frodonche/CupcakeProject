{"version":3,"file":"cupcakes.service.js","sourceRoot":"","sources":["../../src/services/cupcakes.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA,yCAAsC;AACtC,yCAAiE;AAEjE,+BAAkD;AAClD,8CAA0D;AAE1D,2EAAsE;AAGtE,IAAa,eAAe,GAA5B,MAAa,eAAe;IACxB;;OAEG;IACH,YAAoB,wBAAiD;QAAjD,6BAAwB,GAAxB,wBAAwB,CAAyB;IACrE,CAAC;IAED;;;;OAIG;IACH,OAAO;QACH,OAAO,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,MAAM;QACF,OAAO,IAAI,CAAC,OAAO,EAAE;aAChB,IAAI,CACD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC,CAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAC1F,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,GAAG,CAAC,EAAU;QACV,OAAO,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,EAAE,CAAC;aAC5C,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC,CAC1E,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,OAAgB;QACnB,OAAO,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC;aAC3B,IAAI,CACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EACrD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YACZ,iBAAU,CACN,WAAI,CAAC,QAAQ,CAAC,2BAA2B,OAAO,CAAC,GAAG,eAAe,CAAC,CACvE,CAAC,CAAC;YACH,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACrD,EACD,eAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,CAAC,CAC/C,CAAC;IACV,CAAC;IAED;;;;;;;OAOG;IACH,MAAM,CAAC,EAAU,EAAE,OAAgB;QAC/B,OAAO,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,EAAE,EAAE,OAAO,CAAC;aAC9D,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CACX,CAAC,CAAC,IAAI,GAAG,KAAK,CAAC,CAAC;YACZ,iBAAU,CACN,WAAI,CAAC,QAAQ,CAAC,2BAA2B,OAAO,CAAC,GAAG,eAAe,CAAC,CACvE,CAAC,CAAC;YACH,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CACrD,EACD,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC,CAC1E,CACJ,CAAC;IACV,CAAC;IAED;;;;;;OAMG;IACH,MAAM,CAAC,EAAU;QACb,OAAO,IAAI,CAAC,wBAAwB,CAAC,iBAAiB,CAAC,EAAE,CAAC;aACrD,IAAI,CACD,sBAAU,CAAC,CAAC,CAAC,EAAE,CAAC,iBAAU,CAAC,WAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAC/D,mBAAO,CAAC,CAAC,CAAC,EAAE,CACR,CAAC,CAAC,CAAC,CAAC,CAAC;YACD,SAAE,CAAC,SAAS,CAAC,CAAC,CAAC;YACf,iBAAU,CAAC,WAAI,CAAC,QAAQ,CAAC,4BAA4B,EAAE,UAAU,CAAC,CAAC,CAC1E,CACJ,CAAC;IACV,CAAC;IAED;;;;;;;;OAQG;IACK,WAAW,CAAC,OAAgB;QAChC,OAAO,SAAE,CAAC,OAAO,CAAC,CAAC;IACvB,CAAC;CACJ,CAAA;AA9HY,eAAe;IAD3B,iBAAU,EAAE;qCAKqC,mDAAuB;GAJ5D,eAAe,CA8H3B;AA9HY,0CAAe","sourcesContent":["import { Biim } from '@hapiness/biim';\nimport { HTTPHandlerResponse, Injectable } from '@hapiness/core';\n\nimport { Observable, of, throwError } from 'rxjs';\nimport { catchError, flatMap, map } from 'rxjs/operators';\nimport { Cupcake } from '../interfaces';\nimport { CupcakesDocumentService } from './cupcakes-document.service';\n\n@Injectable()\nexport class CupcakesService {\n    /**\n     * Class constructor\n     */\n    constructor(private _cupcakesDocumentService: CupcakesDocumentService) {\n    }\n\n    /**\n     * Returns all existing cupcakes in the list\n     *\n     * @returns {Observable<Cupcake[] | void>}\n     */\n    listAll(): Observable<Cupcake[] | void> {\n        return this._cupcakesDocumentService.find();\n    }\n\n    /**\n     * Returns randomly one cupcakes of the list\n     *\n     * @returns {Observable<Cupcake | void>}\n     */\n    random(): Observable<Cupcake | void> {\n        return this.listAll()\n            .pipe(\n                map(_ => (!!_ && _.length > 0) ? _[ Math.round(Math.random() * _.length) ] : undefined)\n            );\n    }\n\n    /**\n     * Returns one cupcakes of the list matching id in parameter\n     *\n     * @param {string} id of the cupcakes\n     *\n     * @returns {Observable<Cupcake>}\n     */\n    one(id: string): Observable<Cupcake> {\n        return this._cupcakesDocumentService.findById(id)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`Aucun cupcake avec l'id '${id}' trouve`))\n                )\n            );\n    }\n\n    /**\n     * Check if cupcake already exists and add it in cupcakes list\n     *\n     * @param cupcake to create\n     *\n     * @returns {Observable<HTTPHandlerResponse>}\n     */\n    create(cupcake: Cupcake): Observable<HTTPHandlerResponse> {\n        return this._addCupcake(cupcake)\n            .pipe(\n                flatMap(_ => this._cupcakesDocumentService.create(_)),\n                catchError(e =>\n                    e.code = 11000 ?\n                        throwError(\n                            Biim.conflict(`Un cupcake avec le nom '${cupcake.nom}' existe deja`)\n                        ) :\n                        throwError(Biim.preconditionFailed(e.message))\n                ),\n                map(_ => ({ response: _, statusCode: 201 }))\n            );\n    }\n\n    /**\n     * Update a cupcake in cupcakes list\n     *\n     * @param {string} id of the cupcake to update\n     * @param {Cupcake} cupcake data to update\n     *\n     * @returns {Observable<Cupcake>}\n     */\n    update(id: string, cupcake: Cupcake): Observable<Cupcake> {\n        return this._cupcakesDocumentService.findByIdAndUpdate(id, cupcake)\n            .pipe(\n                catchError(e =>\n                    e.code = 11000 ?\n                        throwError(\n                            Biim.conflict(`Un cupcake avec le nom '${cupcake.nom}' existe deja`)\n                        ) :\n                        throwError(Biim.preconditionFailed(e.message))\n                ),\n                flatMap(_ =>\n                    !!_ ?\n                        of(_) :\n                        throwError(Biim.notFound(`Aucun cupcake avec l id '${id}' trouve`))\n                )\n            );\n    }\n\n    /**\n     * Deletes one cupcake in cupcakes list\n     *\n     * @param {string} id of the cupcake to delete\n     *\n     * @returns {Observable<void>}\n     */\n    delete(id: string): Observable<void> {\n        return this._cupcakesDocumentService.findByIdAndRemove(id)\n            .pipe(\n                catchError(e => throwError(Biim.preconditionFailed(e.message))),\n                flatMap(_ =>\n                    !!_ ?\n                        of(undefined) :\n                        throwError(Biim.notFound(`Aucun cupcake avec l id '${id}' trouve`))\n                )\n            );\n    }\n\n    /**\n     * Add cupcake with good data in cupcakes list\n     *\n     * @param cupcake to add\n     *\n     * @returns {Observable<any>}\n     *\n     * @private\n     */\n    private _addCupcake(cupcake: Cupcake): Observable<any> {\n        return of(cupcake);\n    }\n}\n"]}