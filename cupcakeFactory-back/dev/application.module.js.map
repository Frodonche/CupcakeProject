{"version":3,"file":"application.module.js","sourceRoot":"","sources":["../src/application.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Config } from '@hapiness/config';\nimport { HapinessModule, HttpServerService, OnError, OnStart } from '@hapiness/core';\nimport { LoggerModule, LoggerService } from '@hapiness/logger';\nimport { MongoClientService, MongoModule } from '@hapiness/mongo';\nimport { SwagModule } from '@hapiness/swag';\nimport { Observable } from 'rxjs';\nimport { CupcakeModel, BaseModel, GlacageModel, GarnitureModel, ToppingModel } from './models';\n\nimport {\n    DeleteOneCupcakeRoute,\n    GetAllCupcakesRoute,\n    GetOneCupcakeRoute,\n    GetRandomCupcakeRoute,\n    PostCreateCupcakeRoute,\n    PutUpdateCupcakeRoute,\n    GetAllGlacagesRoute,\n    GetOneGlacageRoute,\n    GetAllBasesRoute,\n    GetOneBaseRoute,\n    GetAllGarnituresRoute,\n    GetOneGarnitureRoute,\n    GetAllToppingsRoute,\n    GetOneToppingRoute,\n} from './routes';\n\nimport { CupcakesDocumentService, CupcakesService } from './services';\nimport{ BasesDocumentService, BasesService } from './services';\nimport { GlacagesDocumentService, GlacagesService } from './services';\nimport { GarnituresDocumentService, GarnituresService } from './services';\nimport { ToppingsDocumentService, ToppingsService } from './services';\n\n// factory to declare dependency between CupcalesDocumentService and MongoClientService\n// we use it to be sure that MongoClientService will be loaded before CupcakesDocumentService\n\nconst cupcakesDocumentServiceFactory = (mongoClientService: MongoClientService) => new CupcakesDocumentService(mongoClientService);\nconst basesDocumentServiceFactory = (mongoClientService: MongoClientService) => new BasesDocumentService(mongoClientService);\nconst glacagesDocumentServiceFactory = (mongoClientService: MongoClientService) => new GlacagesDocumentService(mongoClientService);\nconst garnituresDocumentServiceFactory = (mongoClientService: MongoClientService) => new GarnituresDocumentService(mongoClientService);\nconst toppingsDocumentServiceFactory = (mongoClientService: MongoClientService) => new ToppingsDocumentService(mongoClientService);\n\n@HapinessModule({\n    version: '1.0.0',\n    imports: [\n        LoggerModule,\n        SwagModule.setConfig(Config.get('swag')),\n        MongoModule\n    ],\n    declarations: [\n        GetAllCupcakesRoute,\n        GetOneCupcakeRoute,\n        GetRandomCupcakeRoute,\n        PostCreateCupcakeRoute,\n        PutUpdateCupcakeRoute,\n        DeleteOneCupcakeRoute,\n        CupcakeModel,\n        GetAllBasesRoute,\n        GetOneBaseRoute,\n        BaseModel,\n        GetAllGlacagesRoute,\n        GetOneGlacageRoute,\n        GlacageModel,\n        GetAllGarnituresRoute,\n        GetOneGarnitureRoute,\n        GarnitureModel,\n        GetAllToppingsRoute,\n        GetOneToppingRoute,\n        ToppingModel,\n    ],\n    providers: [\n        HttpServerService,\n        CupcakesService,\n        { provide: CupcakesDocumentService, useFactory: cupcakesDocumentServiceFactory, deps: [ MongoClientService ] },\n        BasesService,\n        { provide: BasesDocumentService, useFactory: basesDocumentServiceFactory, deps: [ MongoClientService ] },\n        GlacagesService,\n        { provide: GlacagesDocumentService, useFactory: glacagesDocumentServiceFactory, deps: [ MongoClientService ] },\n        GarnituresService,\n        { provide: GarnituresDocumentService, useFactory: garnituresDocumentServiceFactory, deps: [ MongoClientService ] },\n        ToppingsService,\n        { provide: ToppingsDocumentService, useFactory: toppingsDocumentServiceFactory, deps: [ MongoClientService ] }\n    ]\n})\nexport class ApplicationModule implements OnStart, OnError {\n    /**\n     * Class constructor\n     *\n     * @param _httpServer\n     * @param {LoggerService} _logger\n     */\n    constructor(private _httpServer: HttpServerService, private _logger: LoggerService) {\n    }\n\n    /**\n     * On start process\n     *\n     * @return {void | Observable<any>}\n     */\n    onStart(): void | Observable<any> {\n        this._logger.info(`< Application.bootstrap > Server started at: ${this._httpServer.instance().info.uri}`);\n    }\n\n    /**\n     * On error process\n     *\n     * @param {Error} error\n     * @param data\n     *\n     * @return {void | Observable<any>}\n     */\n    onError(error: Error, data?: any): void | Observable<any> {\n        this._logger.error('A problem occurred during application\\'s lifecycle');\n    }\n}\n"]}